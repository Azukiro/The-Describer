exos/data/*
exos/Poly3/images/*
projet/data_dir/*
projet/models_dir/*

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/
projet/main.py
projet/output/plot_2022_05_25_20_10_20_Training.png
projet/output/plot_2022_05_25_20_36_39_Test.png
projet/output/plot_2022_05_25_21_48_54_Training.png
projet/output/plot_2022_05_25_22_11_13_Test.png
projet/output/plot_2022_05_25_22_52_32_Training.png
projet/output/plot_2022_05_25_23_07_29_Test.png
projet/output/plot_2022_05_25_23_40_03_Training.png
projet/output/plot_2022_05_25_23_54_44_Test.png
projet/output/plot_2022_05_26_00_26_20_Training.png
projet/output/plot_2022_05_26_00_41_59_Test.png
projet/output/plot_2022_05_26_01_13_34_Training.png
projet/output/plot_2022_05_26_01_28_20_Test.png
projet/output/plot_2022_05_26_02_00_30_Training.png
projet/output/plot_2022_05_26_02_15_17_Test.png
projet/output/plot_2022_05_26_02_46_42_Training.png
projet/output/plot_2022_05_26_03_01_30_Test.png
projet/output/plot_2022_05_26_03_33_38_Training.png
projet/output/plot_2022_05_26_03_48_49_Test.png
projet/output/plot_2022_05_26_04_20_15_Training.png
projet/output/plot_2022_05_26_04_34_56_Test.png
projet/output/plot_2022_05_26_05_06_18_Training.png
projet/output/plot_2022_05_26_05_21_02_Test.png
projet/output/plot_2022_05_26_05_53_01_Training.png
projet/output/plot_2022_05_26_06_07_50_Test.png
projet/output/plot_2022_05_26_06_39_19_Training.png
projet/output/plot_2022_05_26_06_55_11_Test.png
projet/output/plot_2022_05_26_07_26_37_Training.png
projet/output/plot_2022_05_26_07_41_28_Test.png
projet/output/plot_2022_05_26_08_13_01_Training.png
projet/output/plot_2022_05_26_08_27_55_Test.png
projet/output/plot_2022_05_26_08_59_46_Training.png
projet/output/plot_2022_05_26_09_14_40_Test.png
projet/output/plot_2022_05_26_09_46_25_Training.png
projet/output/plot_2022_05_26_10_01_23_Test.png
projet/output/plot_2022_05_26_10_33_19_Training.png
projet/output/plot_2022_05_26_10_48_10_Test.png
projet/output/plot_2022_05_26_11_19_54_Training.png
projet/output/plot_2022_05_26_11_35_22_Test.png
projet/output/plot_2022_05_26_12_07_07_Training.png
projet/output/plot_2022_05_26_12_21_55_Test.png
projet/output/plot_2022_05_26_12_21_55_Training.png
projet/output/plot_2022_06_01_21_20_05_Training.png
projet/output/plot_2022_06_01_21_47_53_Test.png
projet/output/plot_2022_06_01_22_42_18_Training.png
projet/output/plot_2022_06_01_23_11_05_Test.png
projet/output/plot_2022_06_02_00_20_24_Training.png
projet/soluce.py
